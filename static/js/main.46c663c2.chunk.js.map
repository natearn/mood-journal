{"version":3,"sources":["database.ts","components/MoodRating.tsx","components/YesNo.tsx","queries.ts","pages/Survey.tsx","pages/SurveyList.tsx","pages/index.tsx","seed.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionType","moods","1","2","3","4","5","MoodsContainer","value","rest","MoodRating","ask","onChange","Typography","component","Rating","name","IconContainerComponent","highlightSelectedOnly","e","v","YesNo","useState","answer","setAnswer","useEffect","ToggleButtonGroup","event","exclusive","aria-label","ToggleButton","open","openDB","upgrade","db","oldVersion","createObjectStore","keyPath","autoIncrement","createIndex","run","f","a","result","close","addResponse","r","add","created","Date","getSurveyResponses","sid","getAllFromIndex","IDBKeyRange","only","useSurveyQuery","id","useQuery","get","useAllSurveysQuery","getAll","placeholderData","useLatestResponseQuery","then","rs","slice","Field","question","kind","Mood","Survey","props","Number","survey","data","latestResponse","client","useQueryClient","useMutation","onSuccess","vars","invalidateQueries","useResponseMutation","mutate","answers","response","setResponse","Container","maxWidth","onSubmit","preventDefault","questions","map","q","i","idx","val","res","Button","type","toString","Item","ListItem","ListItemButton","Link","to","ListItemText","primary","SurveyList","surveys","List","Pages","basepath","path","default","seed","clear","Promise","all","s","put","Seed","QueryClient","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46c663c2.chunk.js","sourcesContent":["import { openDB, DBSchema, IDBPDatabase } from 'idb'\n\nexport enum QuestionType {\n  YesNo = \"YesNo\",\n  Mood = \"Mood\",\n}\n\nexport type Question =\n  | { kind: QuestionType.YesNo, ask: string }\n  | { kind: QuestionType.Mood, ask: string }\n\nexport type Answer =\n  | { kind: QuestionType.YesNo, answer: boolean }\n  | { kind: QuestionType.Mood, answer: number }\n\nexport type Survey = {\n  id?: number\n  name: string\n  questions: Array<Question>\n  created?: Date\n}\n\nexport type Response = {\n  id?: number\n  survey: number\n  answers: Array<Answer>\n  created?: Date\n}\n\ninterface Schema extends DBSchema {\n  surveys: {\n    key: number\n    value: Survey\n  }\n  responses: {\n    key: number\n    value: Response\n    indexes: {\n      'survey': number\n    }\n  }\n}\n\nexport const open = () => openDB<Schema>('mood-joural', 1, {\n  upgrade(db, oldVersion) {\n    if (oldVersion < 1) {\n      db.createObjectStore('surveys', { keyPath: 'id', autoIncrement: true })\n      const responses = db.createObjectStore('responses', { keyPath: 'id', autoIncrement: true })\n      responses.createIndex('survey','survey')\n    }\n  }\n})\n\nexport const run = async (f: (db: IDBPDatabase<Schema>) => any) => {\n  const db = await open()\n  const result = await f(db)\n  await db.close()\n  return result\n}\n\nexport const addSurvey = (s: Survey) => run(db => db.add('surveys', { ...s, created: new Date() }))\nexport const addResponse = (r: Response) => run(db => db.add('responses', { ...r, created: new Date() }))\nexport const getAllSurveys = () => run(db => db.getAll('surveys'))\nexport const getSurvey = (sid: number) => run(db => db.get('surveys', sid))\nexport const getSurveyResponses = (sid: number) => run(db => db.getAllFromIndex('responses', 'survey', IDBKeyRange.only(sid)))\nexport const getLatestResponse = (sid: number) => getSurveyResponses(sid).then(rs => rs.slice(-1)[0])\n","import React from 'react'\nimport Rating from '@mui/material/Rating'\nimport Typography from '@mui/material/Typography'\n\nimport SentimentVeryDissatisfiedIcon from '@mui/icons-material/SentimentVeryDissatisfied'\nimport SentimentDissatisfiedIcon from '@mui/icons-material/SentimentDissatisfied'\nimport SentimentSatisfiedIcon from '@mui/icons-material/SentimentSatisfied'\nimport SentimentSatisfiedAltIcon from '@mui/icons-material/SentimentSatisfiedAltOutlined'\nimport SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied'\n\nconst moods: Record<number, React.ReactNode> = {\n  1: <SentimentVeryDissatisfiedIcon />,\n  2: <SentimentDissatisfiedIcon />,\n  3: <SentimentSatisfiedIcon />,\n  4: <SentimentSatisfiedAltIcon />,\n  5: <SentimentVerySatisfiedIcon />,\n}\n\nconst MoodsContainer = ({ value, ...rest }: { value: number }) => (\n  <span {...rest}>{moods[value]}</span>\n)\n\ntype Props = { ask: string, onChange: (v: number | null) => void }\nconst MoodRating = ({ ask, onChange }: Props) => {\n  return (\n    <fieldset>\n      <Typography component=\"legend\">{ask}</Typography>\n      <Rating\n        name=\"mood-rating\"\n        IconContainerComponent={MoodsContainer}\n        highlightSelectedOnly\n        onChange={(e,v) => onChange(v)}\n      />\n    </fieldset>\n  )\n}\n\nexport default MoodRating\n","import React, { useState, useEffect } from 'react'\nimport Typography from '@mui/material/Typography'\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup'\nimport ToggleButton from '@mui/material/ToggleButton'\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp'\nimport ThumbDownIcon from '@mui/icons-material/ThumbDown'\n\ntype Props = { ask: string, onChange: (v: boolean | null) => void }\nconst YesNo = ({ ask, onChange }: Props) => {\n  const [answer,setAnswer] = useState<boolean | null>(null)\n  useEffect(() => { onChange(answer) }, [onChange,answer])\n  return (\n    <fieldset>\n      <Typography component=\"legend\">{ask}</Typography>\n      <ToggleButtonGroup\n        value={answer}\n        onChange={(event,value) => setAnswer(value)}\n        exclusive\n        aria-label=\"yes or no\"\n      >\n        <ToggleButton value={true} aria-label=\"yes\">\n          <ThumbUpIcon />\n        </ToggleButton>\n        <ToggleButton value={false} aria-label=\"no\">\n          <ThumbDownIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </fieldset>\n  )\n}\n\nexport default YesNo\n","import { useQuery, useMutation, useQueryClient } from 'react-query'\nimport * as db from 'database'\n\nexport const useSurveyQuery = (id: number) => useQuery(\n  ['surveys',id],\n  () => db.getSurvey(id)\n)\n\nexport const useResponseMutation = () => {\n  const client = useQueryClient()\n  return useMutation(\n    db.addResponse,\n    { onSuccess: (data, vars) => client.invalidateQueries(['responses',vars.survey]) },\n  )\n}\n\nexport const useAllSurveysQuery = () => useQuery(\n  ['surveys'],\n  () => db.getAllSurveys(),\n  { placeholderData: [] },\n)\n\nexport const useSurveyResponsesQuery = (id: number) => useQuery(\n  ['responses',id],\n  () => db.getSurveyResponses(id),\n  { placeholderData: [] },\n)\nexport const useLatestResponseQuery = (id: number) => useQuery(\n  ['responses',id,'latest'],\n  () => db.getLatestResponse(id)\n)\n","import React, { useState } from 'react'\nimport { RouteComponentProps } from '@reach/router'\nimport Container from '@mui/material/Container'\nimport Button from '@mui/material/Button'\n\nimport MoodRating from 'components/MoodRating'\nimport YesNo from 'components/YesNo'\nimport { useSurveyQuery, useResponseMutation, useLatestResponseQuery } from 'queries'\n\nimport * as db from 'database'\n\ntype FieldProps = { question: db.Question, onChange: (v: any) => void }\nconst Field = ({ question, onChange } : FieldProps) => {\n  switch (question.kind) {\n    case db.QuestionType.YesNo:\n      return <YesNo ask={question.ask} key={question.ask} onChange={onChange} />\n    case db.QuestionType.Mood:\n      return <MoodRating ask={question.ask} key={question.ask} onChange={onChange} />\n    default:\n      return null\n  }\n}\n\ntype SurveyProps = RouteComponentProps & { id?: string }\nconst Survey = (props: SurveyProps) => {\n  const id = Number(props.id)\n  const {data: survey} = useSurveyQuery(id)\n  const {data: latestResponse} = useLatestResponseQuery(id)\n  const {mutate: addResponse} = useResponseMutation()\n  const [response,setResponse] = useState<db.Response>({ survey: id, answers: [] })\n\n  const setAnswer = (idx: number) => (val: any) => {\n    setResponse(res => {\n      res.answers[idx] = val\n      return res\n    })\n  }\n\n  const submitResponse = (event: React.SyntheticEvent) => {\n    event.preventDefault()\n    addResponse(response)\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <form onSubmit={submitResponse}>\n        {survey?.questions.map((q: db.Question, i: number) => (\n          <Field question={q} key={q.ask} onChange={setAnswer(i)} />\n        ))}\n        <Button type=\"submit\">Submit</Button>\n        <p>latest response: {latestResponse?.created.toString()}</p>\n      </form>\n    </Container>\n  )\n}\n\nexport default Survey\n","import React from 'react'\nimport { RouteComponentProps, Link } from '@reach/router'\nimport { Survey } from 'database'\nimport { useAllSurveysQuery } from 'queries'\n\nimport Container from '@mui/material/Container'\nimport List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemText from '@mui/material/ListItemText'\n\nconst Item = ({ name, id }: Survey) => (\n  <ListItem key={name}>\n    <ListItemButton component={Link} to={`/survey/${id}`}>\n      <ListItemText primary={name} />\n    </ListItemButton>\n  </ListItem>\n)\n\nconst SurveyList = (props: RouteComponentProps) => {\n  const { data: surveys } = useAllSurveysQuery()\n  return (\n    <Container maxWidth=\"sm\">\n      <nav aria-label=\"survey list\">\n        <List>\n          {surveys?.map(Item)}\n        </List>\n      </nav>\n    </Container>\n  )\n}\n\nexport default SurveyList\n","import React from 'react'\nimport { Router } from '@reach/router'\n\nimport Survey from './Survey'\nimport SurveyList from './SurveyList'\n\nconst Pages = () => {\n  return (\n    <Router basepath=\"/mood-journal\">\n      <Survey path=\"/survey/:id\" />\n      <SurveyList default />\n    </Router>\n  )\n}\n\nexport default Pages\n","import { useEffect } from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { open, QuestionType } from 'database'\n\nconst surveys = [\n  {\n    id: 1,\n    name: 'Daily Mood Journal',\n    questions: [\n      { kind: QuestionType.YesNo, ask: \"Did you eat breakfast today?\" },\n      { kind: QuestionType.YesNo, ask: \"Did you go outside today?\" },\n      { kind: QuestionType.YesNo, ask: \"Did you exercise today?\" },\n      { kind: QuestionType.YesNo, ask: \"Did you talk to a friend today?\" },\n      { kind: QuestionType.YesNo, ask: \"Did you complete a chore today?\" },\n      { kind: QuestionType.Mood, ask: \"How are you feeling today?\" },\n    ],\n  },\n]\n\nexport const seed = async () => {\n  const db = await open()\n  await db.clear('surveys')\n  await Promise.all(\n    surveys.map(s => db.put('surveys', s))\n  )\n}\n\nexport const Seed = () => {\n  const client = useQueryClient()\n  const { mutate } = useMutation(\n    seed,\n    { onSuccess: () => client.invalidateQueries() },\n  )\n  useEffect(() => { mutate() }, [mutate])\n  return null\n}\n","import Pages from 'pages'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport { Seed } from 'seed'\n\nconst client = new QueryClient()\n\nconst App = () => {\n  return (\n    <QueryClientProvider client={client}>\n      <Seed />\n      <Pages />\n      <ReactQueryDevtools />\n    </QueryClientProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}